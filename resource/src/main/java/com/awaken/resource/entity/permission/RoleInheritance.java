package com.awaken.resource.entity.permission;

/**
 * 角色继承
 * <p>
 * 当角色过多时（过百、过千、过万），
 * 如果发生要对大部分角色都有的基础权限做调整时，按单个角色调整的话会很耗时。
 * 如果大部分角色都直接继承或间接继承自一个根角色，而此根角色拥有这些基础权限时，只要调整根角色就会很有效率。
 * </p>
 * <p>
 * 例：
 * 一个公司中
 * 所有员工都有"员工"角色的权限
 * 员工职位级别从30级～50级，30级的员工有"30级员工"角色的权限，该角色继承自"员工"角色（同理"31级员工"角色等。。。）
 * <br/>
 * 如果在所有员工都能访问的OA系统上，增加了请假模块，并给所有员工都给"申请年假"的权限
 * N - 当员工的角色分配没有继承关系，并且公司过大、职能细分清晰、角色非常多，而员工各自的角色都由单独权限的集合组成时，
 * 需要给所有的角色都加上"申请年假"的权限，会很耗时。
 * Y - 而当员工的角色都继承自基础的"员工"角色时，只要在"员工"角色上增加"申请年假"的权限，就完成了对所有员工的权限分配。
 * </p>
 * <p>
 * 再比如：
 * 如果是互联网的应用来说，对于用户进行分级管理，那么产生的角色关系就有必要了。
 * 例如，初级用户只能使用部分功能，中级用户能够使用更多功能，以此类推。这就存在继承关系。
 * </p>
 * <p>
 * 由此推断，在用例方面的系统角色继承关系，主要针对<b>用户分级管理</b>。
 * </p>
 * <p>
 * 即便如此，在面向对象的设计与实现过程，也是更多的提倡使用组合的方式来完成这种关系，而不是使用继承的方式来实现。
 * </p>
 */
public class RoleInheritance {
}
